[gd_scene load_steps=9 format=3 uid="uid://dysjvql27gdup"]

[ext_resource type="TileSet" uid="uid://nmh2n1gge150" path="res://godot4/elements/blocks/blocks_tileset.tres" id="1_tmptw"]
[ext_resource type="Script" uid="uid://beft1s7edbc2f" path="res://godot4/elements/blocks/BlocksField.gd" id="2_uuh06"]
[ext_resource type="Texture2D" uid="uid://du67f23be8l8e" path="res://assets/tiles/blocks.png" id="3_8nh0f"]
[ext_resource type="PackedScene" uid="uid://hqu0sjhj021n" path="res://godot4/effects/grid/Grid.tscn" id="4_pibdn"]
[ext_resource type="Script" uid="uid://dwa5kst63hc3b" path="res://addons/vshapes/VRect.gd" id="5_4xf76"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_givw4"]
texture = ExtResource("3_8nh0f")
texture_region_size = Vector2i(200, 200)
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-100, -100, 100, -100, 100, 100, -100, 100)
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-100, -100, 100, -100, 100, 100, -100, 100)
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-100, -100, 100, -100, 100, 100, -100, 100)
3:0/0 = 0
3:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-100, -100, 100, -100, 100, 100, -100, 100)
0:1/0 = 0
1:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0

[sub_resource type="TileSet" id="TileSet_hgb3c"]
tile_size = Vector2i(200, 200)
physics_layer_0/collision_layer = 16
physics_layer_0/collision_mask = 0
custom_data_layer_0/name = "piece_id"
custom_data_layer_0/type = 2
sources/3 = SubResource("TileSetAtlasSource_givw4")

[sub_resource type="GDScript" id="GDScript_4e44b"]
script/source = "extends TileMapLayer
class_name PreviewTileMap

@export var ship : Ship
@export var blocks_tile_map : BlocksTileMap

const VALID_PLACEMENT_TILE = Vector2i(0, 1)   # allowed placement tile
const INVALID_PLACEMENT_TILE = Vector2i(1, 1) # blocked placement tile
const SOURCE_ID_PREVIEW = 3

var _current_preview_shape = []


func show_preview_piece(piece_shape) -> void:
	_current_preview_shape = piece_shape
	_update_preview() 

func hide_preview() -> void:
	_current_preview_shape = []
	clear()

func _process(delta: float) -> void:
	_update_preview()

var _is_currently_valid := true

func is_current_placement_valid() -> bool:
	return _is_currently_valid

func _update_preview() -> void:
	if _current_preview_shape.is_empty():
		clear()
		_is_currently_valid = false
		return
		
	if not ship:
		return

	var ship_anchor_pos = to_local(ship.global_position + Vector2(150, 0).rotated(ship.global_rotation))
	var map_anchor_cell = local_to_map(ship_anchor_pos)

	var is_placement_valid = true
	
	var min_x = blocks_tile_map.get_min_x()
	var max_x = blocks_tile_map.get_max_x()
	var min_y = blocks_tile_map.get_min_y() # For checking if you're too high
	var bottom_y = blocks_tile_map.get_bottom_y()
	
	for cell_offset in _current_preview_shape:
		var target_cell = map_anchor_cell + cell_offset
		
		# Check if outside horizontal bounds
		if target_cell.x < min_x or target_cell.x >= max_x:
			is_placement_valid = false
			break
		
		# Check if outside vertical bounds (can be above, but not below)
		if target_cell.y >= bottom_y:
			is_placement_valid = false
			break
		# not above
		if target_cell.y < min_y:
			is_placement_valid = false
			break
		
		# collision check
		if blocks_tile_map.get_cell_source_id(target_cell) != -1:
			is_placement_valid = false
			break
	
	_is_currently_valid = is_placement_valid
	
	var tile_to_draw: Vector2i
	if _is_currently_valid:
		tile_to_draw = VALID_PLACEMENT_TILE
	else:
		tile_to_draw = INVALID_PLACEMENT_TILE

	clear()
	for cell_offset in _current_preview_shape:
		var target_cell = map_anchor_cell + cell_offset
		set_cell(target_cell, SOURCE_ID_PREVIEW, tile_to_draw)
"

[node name="BlocksField" type="TileMapLayer"]
tile_set = ExtResource("1_tmptw")
script = ExtResource("2_uuh06")

[node name="HeldBlockTileMap" type="TileMapLayer" parent="." node_paths=PackedStringArray("blocks_tile_map")]
unique_name_in_owner = true
modulate = Color(1, 1, 1, 0.384314)
tile_set = SubResource("TileSet_hgb3c")
collision_enabled = false
script = SubResource("GDScript_4e44b")
blocks_tile_map = NodePath("..")

[node name="FallTimer" type="Timer" parent="."]
autostart = true

[node name="Grid" parent="." node_paths=PackedStringArray("init_parametric_shape") instance=ExtResource("4_pibdn")]
unique_name_in_owner = true
cell_size = Vector2(200, 200)
dy = 0.0
outline = true
init_parametric_shape = NodePath("VRect")

[node name="VRect" type="Node" parent="Grid"]
unique_name_in_owner = true
script = ExtResource("5_4xf76")
width = 1600.0
height = 2400.0

[connection signal="timeout" from="FallTimer" to="." method="tick"]
